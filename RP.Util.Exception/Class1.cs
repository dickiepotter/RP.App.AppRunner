using System;

namespace RP.Util.Exception
{
    /// <summary>
    /// A static class of methods to wrap an operation in a try-catch and return the result of the operation.
    /// </summary>
    public static class Try
    {
        public static ExceptionableResult<T> To<T>(Func<T> work)
        {
            try
            {
                var result = work();
                return new ExceptionableResult<T>(result);
            }
            catch (System.Exception exception)
            {
                return new ExceptionableResult<T>(exception);
            }
        }

        public static ExceptionableResult To(Action work)
        {
            try
            {
                work();
                return new ExceptionableResult();
            }
            catch (System.Exception exception)
            {
                return new ExceptionableResult(exception);
            }
        } 
    }

    /// <summary>
    /// The result of an operation wrapped in a <c>try</c> returning the exception on failure.
    /// </summary>
    public class ExceptionableResult
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExceptionableResult"/> class for a successful operation. 
        /// </summary>
        public ExceptionableResult()
        {
            this.Exception = null;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExceptionableResult"/> class for a failed operation. 
        /// </summary>
        /// <param name="exception">The <see cref="System.Exception"/> that was generated by the operation when it failed</param>
        public ExceptionableResult(System.Exception exception)
        {
            this.Exception = exception;
        }

        /// <summary>
        /// Get a boolean which is <see langword="true"/> if the operation was a success
        /// </summary>
        public bool Success 
        {
            get
            {
                return this.Exception != null;
            }
        }

        /// <summary>
        /// Gets the exception thrown by the operation if it failed.
        /// </summary>
        public System.Exception Exception { get; protected set; }
    }

    /// <summary>
    /// The result of an operation wrapped in a <c>try</c> containing either a success value or an exception.
    /// </summary>
    /// <typeparam name="T">The values type if the operation was a success</typeparam>
    public class ExceptionableResult<T> : ExceptionableResult
    {
        /// <summary>
        /// The resulting value of the operation if successful or the default value for the generic type <typeparamref name="T"/>.
        /// </summary>
        private readonly T value;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExceptionableResult"/> class for a successful operation. 
        /// </summary>
        /// <param name="value">The value that was successfully produced by the operation</param>
        public ExceptionableResult(T value)
        {
            this.Exception = null;
            this.value = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExceptionableResult"/> class for a failed operation. 
        /// </summary>
        /// <param name="exception">The <see cref="System.Exception"/> that was generated by the operation when it failed</param>
        public ExceptionableResult(System.Exception exception)
        {
            this.value = default(T);
            this.Exception = exception;
        }

        /// <summary>
        /// Gets the result of an operation if it was successful or throws the exception that was generated by the original operation.
        /// </summary>
        /// <exception cref="Exception" accessor="get">The original exception generated by the operation is thrown if the getter for the Value property is called and the operation had failed.</exception>
        public T Value
        {
            get
            {
                if (this.Exception != null)
                {
                    throw this.Exception;
                }

                return this.value;
            }
        }
    }
}
